import * as React from 'react';
import { INewPowerFactorProps } from './INewPowerFactorProps';
import "@pnp/sp/profiles";
import "@pnp/sp/webs";
import "@pnp/sp/lists";
import "@pnp/sp/items";
import "@pnp/sp/folders";
import "@pnp/sp/files";
import "@pnp/sp/site-users/web";
export interface INewPowerFactorState {
    OrderNo: any[];
    No: any[];
    options: Ioption[];
    selectedOptions: string;
    selectedOptions2: string;
    SelectedFloor: string;
    MasterID: string;
    ReceiversID: string;
    MasterNO: string;
    UserPicture: string;
    UserName: string;
    Designation: string;
    Email: string;
    SalesInvoiceHeaderData: any[];
    SalesPersonCode: string;
    Locations: any[];
    SelectedInvo: string;
    SelectedOrd: string;
    SelectedMod: string;
    SelectedOrder: any[];
    SelectedLoc: string;
    SelectedProject: string;
    SelectedConsultant: string;
    SelectedCustomer: string;
    items: any[];
    items2: any[];
    items3: any[];
    category: string;
    brand: string;
    address: string;
    Quantity: any[];
    ModelNumber: any[];
    rows: any[];
    rowLimit: number;
    ModelTypeArray: any[];
    QuantityNumber: string;
    ToAddress: string;
    From: string;
    Subject: string;
    SubjectManually: string;
    Details: string;
    Model: string;
    currentDate: string;
    sum: string;
    QuantityNo: any[];
    CreateManually: boolean;
    Floor: boolean;
    SelectedProjName: string;
    SelectedSellTo: string;
    SelectedConsult: string;
    IsRowPresent: boolean;
    IsOrderPresent: boolean;
    count: number;
    TotlaNoQuantity: number;
    TotalModel: number;
    regards: string;
    SubContent: string;
    regards1: string;
    SubContent1: string;
    IsRelative: boolean;
    ToLeft: boolean;
    SubLeft: boolean;
    ModLeft: boolean;
    NoteLeft: boolean;
    ReceiLeft: boolean;
    SelectedAddress: string;
    ToStatus: boolean;
    showdata: any[];
    showmodel: any[];
    showinvoice: any[];
    ModelPF: any[];
    BrandPF: any[];
    arrayIndex: number;
    dataQuantity: string;
    BrandManualType: any[];
    GetInvoiceNo: any[];
    MutlipleNew: any[];
    SelectedBrandTypes: string;
    FloorLocation: any[];
}
export interface Ioption {
    value: string;
    label: string;
}
export default class NewPowerFactor extends React.Component<INewPowerFactorProps, INewPowerFactorState, {}> {
    private displayData;
    private displayModel;
    constructor(props: INewPowerFactorProps, state: INewPowerFactorState);
    private handleChange1;
    GetDetails(data: any): void;
    private handleChange;
    private handleChangeTextarea1;
    private handleChangeTextarea2;
    private handleChangeTextarea3;
    private handleChangeTextarea4;
    private handleChangeTextarea5;
    private handleChangeTextarea6;
    private handleChangeTextarea7;
    private handleChangeTextarea8;
    name(selectedValue: any): void;
    name3(selectedValue: any): void;
    GetModelName3(dataNo: any, dataQuantity1: any, count: any): void;
    findValueInModelQuantityArray(value: any, arr: any): boolean;
    GetModelName(dataNo: any, dataQuantity1: any, count: any): void;
    InvoiceQuantity: (index: any, IndoorInput: any, OutdoorInput: any) => void;
    GetTotal(): void;
    GetModelTypes: (selectedOptions2: any) => void;
    handleChangePf: (selectedOptions2: any) => void;
    getTable2(arrayIndex: any): void;
    ValidateModelSelection(count: any): boolean;
    GetQuantitytotal(count: any): void;
    getTable(): void;
    handleAddRow: () => void;
    FloorhandleAddRow: () => void;
    GetFloorLocation(): void;
    handleChangeFloorPf: (selectedOptions2: any, SelectedFloor: any) => void;
    GetFloor(SelectedFloor: any): void;
    getTableFloor(arrayIndex: any): void;
    private handleChange3;
    MultipleInvoice(Selected: any, ProjectName: any, customerName: any, ConsultName: any): void;
    private handleChange2;
    private handleChangeConsultantName;
    private handleChangeCustomer;
    componentDidMount(): void;
    GetProfile(): Promise<void>;
    handleInputChange: (event: any) => void;
    GetPfAuoto(event: any): JQuery.jqXHR<any>;
    GetLocation(): void;
    handleClick: (Locations: any) => void;
    GetModelNo(): Promise<void>;
    GetModelNoQTY: () => JQuery.jqXHR<any>;
    GetModelNOAssgin(resultData: any): void;
    private GetCurrentUserName;
    private AddItems;
    private AddItemsManually;
    private SaveManuallyList;
    private SaveManuallyList2;
    private AddListItems2;
    private AddListItems;
    SaveForPrint(): void;
    GetManuallTotal(): void;
    SaveReceiverValidation(): boolean;
    SuccessReceiver(): void;
    SuccessModel: () => void;
    private SaveReceiver;
    ShowDrop: () => void;
    ShowSubject: () => void;
    SaveSubjectValidation(): boolean;
    SaveModelValidation(): boolean;
    SaveManualModelValidation(): boolean;
    SubjectValidationManually(): boolean;
    ShowModel: () => void;
    ShowNotes: () => void;
    ShowReceiver: () => void;
    HideReceiver: () => void;
    ShowPreview: () => void;
    ShowManualPreview: () => void;
    ShowManualSend: () => void;
    ShowSend: () => void;
    CancelAlert: () => void;
    StopProcess: () => void;
    CancelManual: () => void;
    HideManualPreview: () => void;
    HidePreview: () => void;
    close(): void;
    SelectAll(): void;
    MultipleSelect(): void;
    SuccessSelect(): void;
    SelectedInvoice(): void;
    ShowManually: () => void;
    HideManually: () => void;
    SaveInvoValidation(): boolean;
    SaveManually(): void;
    ShowFloor: () => void;
    SaveInvoFloorValidation(): boolean;
    SaveFloor: () => void;
    clearField: () => void;
    clearFieldManually: () => void;
    private IndoorheadRows;
    UploadFiletoDocumentLibrary(file: File, webUrl: string, ReceiverId: any): Promise<void>;
    SaveLibrary(ReceiverId: any): void;
    ManualLibrary(ReceiverId: any): void;
    SavePrint(): void;
    DownManual(): void;
    render(): React.ReactElement<INewPowerFactorProps>;
}
//# sourceMappingURL=NewPowerFactor.d.ts.map